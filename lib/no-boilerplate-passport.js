// Generated by CoffeeScript 1.9.1
(function() {
  var _, configureProviderStrategy, debug, format, getProviderPaths, init, passport, providerSchema, rootSchema, validate;

  _ = require('lodash');

  debug = require('debug')('no-boilerplate::passport');

  passport = require('passport');

  validate = require('jsonschema').validate;

  format = require('string-format');

  rootSchema = {
    type: 'object',
    properties: {
      version: {
        type: 'string'
      },
      baseURL: {
        type: 'string'
      },
      commonPaths: {
        type: 'object',
        properties: {
          start: {
            type: 'string'
          },
          callback: {
            type: 'string'
          },
          success: {
            type: 'string'
          },
          failure: {
            type: 'string'
          }
        },
        required: [],
        additionalProperties: false
      },
      providers: {
        type: 'object',
        additionalProperties: true
      }
    },
    required: ['version', 'baseURL', 'providers'],
    additionalProperties: false
  };

  providerSchema = {
    type: 'object',
    properties: {
      providerName: {
        type: 'string'
      },
      paths: {
        type: 'object',
        properties: {
          start: {
            type: 'string'
          },
          callback: {
            type: 'string'
          },
          success: {
            type: 'string'
          },
          failure: {
            type: 'string'
          }
        },
        required: [],
        additionalProperties: false
      },
      callbackUrlProperty: {
        type: 'string'
      },
      config: {
        type: 'object'
      },
      handler: {
        type: ['object', 'string', 'function'],
        properties: {
          module: {
            type: 'string'
          },
          "function": {
            type: 'string'
          }
        },
        required: [],
        additionalProperties: false
      }
    },
    required: ['callbackUrlProperty', 'config', 'handler'],
    additionalProperties: false
  };

  init = function(app, config) {
    var baseURL, ref, validationErrors;
    validationErrors = ((ref = validate(config, rootSchema)) != null ? ref.errors : void 0) || [];
    if (!_.isEmpty(validationErrors)) {
      throw new Error('Bad configuration object: ' + _.first(validationErrors));
    }
    baseURL = config.baseURL;
    debug('Base URL for Passport configuration', baseURL);
    return _.each(config.providers, function(providerConfig, providerName) {
      var paths, pathsProviderName, ref1, strategyName;
      validationErrors = ((ref1 = validate(providerConfig, providerSchema)) != null ? ref1.errors : void 0) || [];
      if (!_.isEmpty(validationErrors)) {
        throw new Error('Bad configuration object for ' + providerName + ': ' + _.first(validationErrors));
      }
      strategyName = 'no-boilerplate-' + providerName + '-auth-strategy';
      pathsProviderName = providerConfig.providerName || providerName;
      paths = getProviderPaths(config.commonPaths, providerConfig.paths, pathsProviderName);
      configureProviderStrategy(strategyName, baseURL, paths, providerName, providerConfig);
      debug('Setting up start endpoint on', paths.start);
      app.get(paths.start, function(req, res, next) {
        return passport.authorize(strategyName)(req, res, next);
      });
      debug('Setting up callback endpoint on', paths.callback);
      return app.get(paths.callback, function(req, res, next) {
        var handler, options;
        options = {
          successRedirect: paths.success,
          failureRedirect: paths.failure
        };
        handler = function(err, user, info) {
          if (err) {
            debug('Failed to authorize:', err);
            return res.redirect(options.failureRedirect);
          }
          return res.redirect(options.successRedirect);
        };
        return passport.authorize(strategyName, options, handler)(req, res, next);
      });
    });
  };

  configureProviderStrategy = function(strategyName, baseURL, paths, providerName, providerConfig) {
    var Strategy, strategy, strategyOptions;
    Strategy = require('passport-' + providerName).Strategy;
    strategyOptions = _.clone(providerConfig.config);
    strategyOptions[providerConfig.callbackUrlProperty] = baseURL + paths.callback;
    strategy = new Strategy(strategyOptions, function(token, tokenSecret, profile, done) {
      var handlerFunction, handlerModule;
      if (_.isFunction(providerConfig.handler)) {
        handlerFunction = providerConfig.handler;
      } else if (_.isObject(providerConfig.handler)) {
        handlerModule = require(providerConfig.handler.module);
        handlerFunction = handlerModule.exports[providerConfig.handler["function"]];
      } else if (_.isString(providerConfig.handler)) {
        handlerFunction = eval(providerConfig.handler);
      } else {
        throw new Error('Unsupported handler function type for provider ' + providerName);
      }
      return handlerFunction(token, tokenSecret, profile, done);
    });
    return passport.use(strategyName, strategy);
  };

  getProviderPaths = function(commonPaths, providerPaths, providerName) {
    var paths;
    paths = {};
    _.each(['start', 'callback', 'success', 'failure'], function(pathName) {
      var path;
      path = (providerPaths && providerPaths[pathName]) || commonPaths[pathName];
      if (path) {
        path = format(path, {
          providerName: providerName
        });
      } else {
        throw new Error(format('Inexistent path {0} for provider {1}', path, providerName));
      }
      return paths[pathName] = path;
    });
    return paths;
  };

  module.exports = init;

}).call(this);

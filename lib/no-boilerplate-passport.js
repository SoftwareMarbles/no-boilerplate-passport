// Generated by CoffeeScript 1.9.3
(function() {
  var COMPLETE_PATHS_SCHEMA, COMPLETE_PROVIDER_SCHEMA, HANDLER_SCHEMA, PATHS_SCHEMA, ROOT_SCHEMA, _, configureProviderStrategy, debug, deepExtend, format, init, passport, resolveProviderPaths, validate;

  _ = require('lodash');

  debug = require('debug')('no-boilerplate.passport');

  passport = require('passport');

  validate = require('jsonschema').validate;

  format = require('string-format');

  deepExtend = require('deep-extend');

  PATHS_SCHEMA = {
    type: 'object',
    properties: {
      start: {
        type: 'string'
      },
      callback: {
        type: 'string'
      },
      success: {
        type: 'string'
      },
      failure: {
        type: 'string'
      }
    },
    required: [],
    additionalProperties: false
  };

  COMPLETE_PATHS_SCHEMA = {
    type: 'object',
    properties: {
      start: {
        type: 'string'
      },
      callback: {
        type: 'string'
      },
      success: {
        type: 'string'
      },
      failure: {
        type: 'string'
      }
    },
    required: ['start', 'callback', 'success', 'failure'],
    additionalProperties: false
  };

  HANDLER_SCHEMA = {
    handler: {
      type: ['object', 'string', 'function'],
      properties: {
        module: {
          type: 'string'
        },
        "function": {
          type: 'string'
        }
      },
      required: [],
      additionalProperties: false
    }
  };

  ROOT_SCHEMA = {
    type: 'object',
    properties: {
      version: {
        type: 'string'
      },
      baseURL: {
        type: 'string'
      },
      common: {
        type: 'object',
        properties: {
          paths: PATHS_SCHEMA,
          callbackURLProperty: {
            type: 'string'
          },
          handler: HANDLER_SCHEMA
        },
        required: [],
        additionalProperties: false
      },
      providers: {
        type: 'object',
        additionalProperties: true
      }
    },
    required: ['version', 'baseURL', 'providers'],
    additionalProperties: false
  };

  COMPLETE_PROVIDER_SCHEMA = {
    type: 'object',
    properties: {
      name: {
        type: 'string'
      },
      paths: COMPLETE_PATHS_SCHEMA,
      callbackURLProperty: {
        type: 'string'
      },
      config: {
        type: 'object'
      },
      handler: HANDLER_SCHEMA,
      custom: {
        type: 'object'
      }
    },
    required: ['paths', 'callbackURLProperty', 'config', 'handler'],
    additionalProperties: false
  };

  init = function(app, config) {
    var baseURL, commonConfig, ref, validationErrors;
    validationErrors = ((ref = validate(config, ROOT_SCHEMA)) != null ? ref.errors : void 0) || [];
    if (!_.isEmpty(validationErrors)) {
      throw new Error('Bad configuration object: ' + _.first(validationErrors));
    }
    baseURL = config.baseURL;
    commonConfig = config.common || {};
    debug('Base URL for Passport configuration', baseURL);
    return _.each(config.providers, function(providerConfig, providerName) {
      var completeProviderConfig, paths, pathsProviderName, ref1, strategyName;
      debug('Configuring', providerName, 'strategy');
      completeProviderConfig = _.clone(commonConfig);
      deepExtend(completeProviderConfig, providerConfig);
      pathsProviderName = providerConfig.name || providerName;
      paths = resolveProviderPaths(completeProviderConfig.paths, pathsProviderName);
      debug('Complete configuration', completeProviderConfig);
      validationErrors = ((ref1 = validate(completeProviderConfig, COMPLETE_PROVIDER_SCHEMA)) != null ? ref1.errors : void 0) || [];
      if (!_.isEmpty(validationErrors)) {
        throw new Error('Bad configuration object for ' + providerName + ': ' + _.first(validationErrors));
      }
      strategyName = 'no-boilerplate-' + providerName + '-auth-strategy';
      configureProviderStrategy(strategyName, baseURL, paths, providerName, completeProviderConfig);
      debug('Setting up start endpoint on', paths.start);
      app.get(paths.start, function(req, res, next) {
        debug('Authorization start');
        return passport.authorize(strategyName)(req, res, next);
      });
      debug('Setting up callback endpoint on', paths.callback);
      return app.get(paths.callback, function(req, res, next) {
        var handler, options;
        options = {
          successRedirect: paths.success,
          failureRedirect: paths.failure
        };
        debug('Authorization callback', paths.start);
        handler = function(err, user, info) {
          debug('Authorization handler', err, user, info);
          if (err) {
            debug('Failed to authorize:', err);
            return res.redirect(options.failureRedirect);
          }
          return res.redirect(options.successRedirect);
        };
        return passport.authorize(strategyName, options, handler)(req, res, next);
      });
    });
  };

  configureProviderStrategy = function(strategyName, baseURL, paths, providerName, providerConfig) {
    var Strategy, error, strategy, strategyOptions;
    Strategy = null;
    try {
      Strategy = require('passport-' + providerName).Strategy;
    } catch (_error) {
      error = _error;
      Strategy = require(providerName).Strategy;
    }
    strategyOptions = _.clone(providerConfig.config);
    strategyOptions[providerConfig.callbackURLProperty] = baseURL + paths.callback;
    strategy = new Strategy(strategyOptions, function(arg1, arg2, arg3, done) {
      var handlerFunction, handlerModule;
      debug('Strategy callback for', strategyName);
      handlerFunction = null;
      if (_.isFunction(providerConfig.handler)) {
        debug('Handler is a function');
        handlerFunction = providerConfig.handler;
      } else if (_.isObject(providerConfig.handler)) {
        debug('Handler is a module function');
        handlerModule = require(providerConfig.handler.module);
        handlerFunction = handlerModule.exports[providerConfig.handler["function"]];
      } else if (_.isString(providerConfig.handler)) {
        debug('Handler is a string encoded function');
        handlerFunction = eval(providerConfig.handler);
      } else {
        throw new Error('Unsupported handler function type for provider ' + providerName);
      }
      return handlerFunction(providerConfig, arg1, arg2, arg3, done);
    });
    return passport.use(strategyName, strategy);
  };

  resolveProviderPaths = function(paths, providerName) {
    var resolvedPaths;
    resolvedPaths = {};
    _.each(['start', 'callback', 'success', 'failure'], function(pathName) {
      var path;
      path = paths[pathName];
      if (path) {
        path = format(path, {
          name: providerName
        });
      } else {
        throw new Error(format('Path {0} not defined for provider {1}', path, providerName));
      }
      return resolvedPaths[pathName] = path;
    });
    return resolvedPaths;
  };

  module.exports = init;

}).call(this);
